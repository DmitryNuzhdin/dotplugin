/* The following code was generated by JFlex 1.7.0-SNAPSHOT tweaked for IntelliJ platform */

package org.plugin.dot;

import com.intellij.lexer.*;
import com.intellij.psi.tree.IElementType;
import static org.plugin.dot.psi.DotTypes.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0-SNAPSHOT
 * from the specification file <tt>_DotLexer.flex</tt>
 */
public class _DotLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [7, 7, 7]
   * Total runtime size is 1928 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[ZZ_CMAP_Z[ch>>14]|((ch>>7)&0x7f)]<<7)|(ch&0x7f)];
  }

  /* The ZZ_CMAP_Z table has 68 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\103\200");

  /* The ZZ_CMAP_Y table has 256 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\1\1\53\2\1\3\22\2\1\4\37\2\1\3\237\2");

  /* The ZZ_CMAP_A table has 640 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\0\1\3\1\2\3\1\22\0\1\3\1\0\1\53\1\45\6\0\1\46\1\0\1\55\1\42\1\51\1\44"+
    "\12\52\1\56\1\57\1\54\1\60\1\43\2\0\1\10\1\37\1\32\1\4\1\22\1\47\1\6\1\12"+
    "\1\5\3\47\1\65\1\24\1\25\1\11\1\47\1\7\1\30\1\31\1\36\3\47\1\66\1\47\1\64"+
    "\1\0\1\63\1\0\1\50\1\0\1\16\1\41\1\34\1\21\1\23\1\47\1\14\1\20\1\13\4\47\1"+
    "\26\1\27\1\17\1\47\1\15\1\35\1\33\1\40\5\47\1\62\1\0\1\61\7\0\1\1\32\0\1\3"+
    "\337\0\1\3\177\0\13\3\35\0\2\1\5\0\1\3\57\0\1\3\40\0");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\1\1\2\2\3\13\4\3\2\1\5\1\6\1\7"+
    "\2\2\1\10\1\11\1\12\1\13\1\14\1\15\1\16"+
    "\1\17\1\7\15\4\1\0\1\20\2\0\1\21\1\7"+
    "\1\0\1\7\1\22\1\0\1\23\1\7\15\4\1\0"+
    "\4\4\1\24\1\4\1\25\4\4\1\26\2\4\1\27"+
    "\1\30\6\4\1\31\2\4\1\32\2\4\1\33";

  private static int [] zzUnpackAction() {
    int [] result = new int[100];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\67\0\156\0\67\0\245\0\334\0\u0113\0\u014a"+
    "\0\u0181\0\u01b8\0\u01ef\0\u0226\0\u025d\0\u0294\0\u02cb\0\u0302"+
    "\0\u0339\0\u0370\0\67\0\67\0\u03a7\0\u03de\0\u0415\0\67"+
    "\0\67\0\67\0\67\0\67\0\67\0\67\0\67\0\67"+
    "\0\u044c\0\u0483\0\u04ba\0\u04f1\0\u0528\0\u055f\0\u0596\0\u05cd"+
    "\0\u0604\0\u063b\0\u0672\0\u06a9\0\u06e0\0\67\0\67\0\u0717"+
    "\0\u074e\0\156\0\u0370\0\u0785\0\u03de\0\156\0\u07bc\0\u07bc"+
    "\0\u0415\0\u07f3\0\u082a\0\u0861\0\u0898\0\u08cf\0\u0906\0\u093d"+
    "\0\u0974\0\u09ab\0\u09e2\0\u0a19\0\u0a50\0\u0a87\0\u0abe\0\u0af5"+
    "\0\u0b2c\0\u0b63\0\u0b9a\0\334\0\u0bd1\0\334\0\u0c08\0\u0c3f"+
    "\0\u0c76\0\u0cad\0\156\0\u0ce4\0\u0d1b\0\334\0\334\0\u0d52"+
    "\0\u0d89\0\u0dc0\0\u0df7\0\u0e2e\0\u0e65\0\334\0\u0e9c\0\u0ed3"+
    "\0\334\0\u0f0a\0\u0f41\0\334";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[100];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\2\3\1\4\1\5\1\6\1\7\5\6\1\10"+
    "\4\6\1\11\1\12\1\13\1\14\1\6\1\15\1\6"+
    "\1\16\4\6\1\17\4\6\1\20\1\2\1\21\1\22"+
    "\1\2\1\6\1\23\1\24\1\25\1\26\1\27\1\30"+
    "\1\31\1\32\1\33\1\34\1\35\1\36\1\37\2\6"+
    "\52\0\1\40\107\0\1\6\1\41\5\6\1\42\26\6"+
    "\5\0\4\6\12\0\2\6\4\0\36\6\5\0\4\6"+
    "\12\0\2\6\4\0\3\6\1\43\5\6\1\44\24\6"+
    "\5\0\4\6\12\0\2\6\4\0\11\6\1\44\24\6"+
    "\5\0\4\6\12\0\2\6\4\0\7\6\1\42\26\6"+
    "\5\0\4\6\12\0\2\6\4\0\1\45\14\6\1\46"+
    "\20\6\5\0\4\6\12\0\1\47\1\6\4\0\15\6"+
    "\1\46\20\6\5\0\4\6\12\0\2\6\4\0\21\6"+
    "\1\50\1\6\1\51\12\6\5\0\4\6\12\0\2\6"+
    "\4\0\23\6\1\51\12\6\5\0\4\6\12\0\2\6"+
    "\4\0\25\6\1\52\1\6\1\53\2\6\1\54\1\6"+
    "\1\55\1\6\5\0\4\6\12\0\2\6\4\0\27\6"+
    "\1\53\4\6\1\55\1\6\5\0\4\6\12\0\2\6"+
    "\1\56\2\0\37\56\2\57\6\56\1\25\14\56\44\0"+
    "\1\60\1\0\1\61\3\0\1\40\14\0\1\60\1\0"+
    "\1\62\47\60\1\63\14\60\1\40\2\0\47\40\1\25"+
    "\14\40\52\64\1\65\1\66\13\64\1\67\2\0\40\67"+
    "\1\70\6\67\1\71\14\67\4\0\2\6\1\72\33\6"+
    "\5\0\4\6\12\0\2\6\4\0\10\6\1\73\25\6"+
    "\5\0\4\6\12\0\2\6\4\0\4\6\1\74\31\6"+
    "\5\0\4\6\12\0\2\6\4\0\12\6\1\75\23\6"+
    "\5\0\4\6\12\0\2\6\4\0\2\6\1\76\33\6"+
    "\5\0\4\6\12\0\2\6\4\0\10\6\1\77\25\6"+
    "\5\0\4\6\12\0\2\6\4\0\5\6\1\100\30\6"+
    "\5\0\4\6\12\0\2\6\4\0\1\101\35\6\5\0"+
    "\4\6\12\0\2\6\4\0\15\6\1\102\20\6\5\0"+
    "\4\6\12\0\2\6\4\0\3\6\1\103\32\6\5\0"+
    "\4\6\12\0\2\6\4\0\11\6\1\104\24\6\5\0"+
    "\4\6\12\0\2\6\4\0\33\6\1\105\2\6\5\0"+
    "\4\6\12\0\2\6\4\0\35\6\1\106\5\0\4\6"+
    "\12\0\2\6\1\60\1\0\1\62\64\60\46\61\1\107"+
    "\20\61\53\64\1\66\13\64\1\67\2\0\40\67\1\70"+
    "\23\67\4\0\3\6\1\110\32\6\5\0\4\6\12\0"+
    "\2\6\4\0\11\6\1\111\24\6\5\0\4\6\12\0"+
    "\2\6\4\0\5\6\1\112\30\6\5\0\4\6\12\0"+
    "\2\6\4\0\13\6\1\113\22\6\5\0\4\6\12\0"+
    "\2\6\4\0\16\6\1\114\17\6\5\0\4\6\12\0"+
    "\2\6\4\0\17\6\1\114\16\6\5\0\4\6\12\0"+
    "\2\6\4\0\25\6\1\115\10\6\5\0\4\6\12\0"+
    "\2\6\4\0\16\6\1\116\17\6\5\0\4\6\12\0"+
    "\2\6\4\0\17\6\1\116\16\6\5\0\4\6\12\0"+
    "\2\6\4\0\1\6\1\117\34\6\5\0\4\6\12\0"+
    "\2\6\4\0\7\6\1\120\26\6\5\0\4\6\12\0"+
    "\2\6\4\0\2\6\1\121\33\6\5\0\4\6\12\0"+
    "\2\6\4\0\10\6\1\122\25\6\5\0\4\6\12\0"+
    "\2\6\44\61\1\123\1\61\1\107\20\61\4\0\4\6"+
    "\1\124\31\6\5\0\4\6\12\0\2\6\4\0\12\6"+
    "\1\125\23\6\5\0\4\6\12\0\2\6\4\0\6\6"+
    "\1\126\27\6\5\0\4\6\12\0\2\6\4\0\14\6"+
    "\1\126\21\6\5\0\4\6\12\0\2\6\4\0\36\6"+
    "\5\0\4\6\12\0\1\6\1\127\4\0\26\6\1\130"+
    "\7\6\5\0\4\6\12\0\2\6\4\0\30\6\1\131"+
    "\5\6\5\0\4\6\12\0\2\6\4\0\3\6\1\132"+
    "\32\6\5\0\4\6\12\0\2\6\4\0\11\6\1\133"+
    "\24\6\5\0\4\6\12\0\2\6\4\0\5\6\1\134"+
    "\30\6\5\0\4\6\12\0\2\6\4\0\13\6\1\135"+
    "\22\6\5\0\4\6\12\0\2\6\4\0\25\6\1\136"+
    "\10\6\5\0\4\6\12\0\2\6\4\0\27\6\1\136"+
    "\6\6\5\0\4\6\12\0\2\6\4\0\4\6\1\137"+
    "\31\6\5\0\4\6\12\0\2\6\4\0\12\6\1\140"+
    "\23\6\5\0\4\6\12\0\2\6\4\0\6\6\1\141"+
    "\27\6\5\0\4\6\12\0\2\6\4\0\14\6\1\141"+
    "\21\6\5\0\4\6\12\0\2\6\4\0\5\6\1\142"+
    "\30\6\5\0\4\6\12\0\2\6\4\0\13\6\1\143"+
    "\22\6\5\0\4\6\12\0\2\6\4\0\6\6\1\144"+
    "\27\6\5\0\4\6\12\0\2\6\4\0\14\6\1\144"+
    "\21\6\5\0\4\6\12\0\2\6";

  private static int [] zzUnpackTrans() {
    int [] result = new int[3960];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\2\1\1\11\52\1\1\0\1\1\2\0\1\11\1\1"+
    "\1\0\1\1\1\11\1\0\17\1\1\0\13\1\1\11"+
    "\21\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[100];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
  public _DotLexer() {
    this((java.io.Reader)null);
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public _DotLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return LETTERS;
            }
          case 28: break;
          case 2: 
            { return com.intellij.psi.TokenType.BAD_CHARACTER;
            }
          case 29: break;
          case 3: 
            { return com.intellij.psi.TokenType.WHITE_SPACE;
            }
          case 30: break;
          case 4: 
            { return SIMPLE_ID;
            }
          case 31: break;
          case 5: 
            { return COMPASS;
            }
          case 32: break;
          case 6: 
            { return DOT;
            }
          case 33: break;
          case 7: 
            { return NUMERAL_ID;
            }
          case 34: break;
          case 8: 
            { return COMMA;
            }
          case 35: break;
          case 9: 
            { return COLON;
            }
          case 36: break;
          case 10: 
            { return EOS;
            }
          case 37: break;
          case 11: 
            { return EQUAL;
            }
          case 38: break;
          case 12: 
            { return CURLY_BRACKET_RIGHT;
            }
          case 39: break;
          case 13: 
            { return CURLY_BRACHET_LEFT;
            }
          case 40: break;
          case 14: 
            { return BRACKET_RIGHT;
            }
          case 41: break;
          case 15: 
            { return BRACHET_LEFT;
            }
          case 42: break;
          case 16: 
            { return EDGE_OP;
            }
          case 43: break;
          case 17: 
            { return COMMENT;
            }
          case 44: break;
          case 18: 
            { return QUOTED_ANY;
            }
          case 45: break;
          case 19: 
            { return HTML_ID;
            }
          case 46: break;
          case 20: 
            { return EDGE_;
            }
          case 47: break;
          case 21: 
            { return NODE_;
            }
          case 48: break;
          case 22: 
            { return MULTILINE_COMMENT;
            }
          case 49: break;
          case 23: 
            { return GRAPH_;
            }
          case 50: break;
          case 24: 
            { return EMPTY;
            }
          case 51: break;
          case 25: 
            { return STRICT_;
            }
          case 52: break;
          case 26: 
            { return DIGRAPH_;
            }
          case 53: break;
          case 27: 
            { return SUB_GRAPH_;
            }
          case 54: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
